/*!
* Copyright 2014 - 2014 Ivy Information Systems Ltd.  All rights reserved.
* 
* This software was developed by Webdetails and is provided under the terms
* of the Mozilla Public License, Version 2.0, or any later version. You may not use
* this file except in compliance with the license. If you need a copy of the license,
* please go to  http://mozilla.org/MPL/2.0/. The Initial Developer is Webdetails.
*
* Software distributed under the Mozilla Public License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to
* the license for the specific language governing your rights and limitations.
*/
var meteoComp = BaseComponent.extend({

	GUID: function(){
		function S4() { return (((1+Math.random())*0x10000)|0).toString(16).substring(1); };
		return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0,3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
	},

	summariesObj: [],

	gridSize: function(rowNum){
		if(rowNum == 1){
			return [1, "col-md-12 span-24"];
		}else if(rowNum > 3){
			return [4, "col-md-3 span-6"];
		}

		return [2, "col-md-6 span-12"];
	},
    template: function(){ 
        return "<div class='meteo'>" +
				"<div class='linha1' align='center'><font size='3'><u><b>{{label}}</b></u></font></div>" +
				"<table style='width:100%'>" +
				"	<tr>" +
				"		<td style='width: 150px'><div class='{{iconType}} icon'><b></b></div></div></td>" +
				"		<td><div class='linha2' align='center'><font size='6' align='right'><b>{{subValue}}{{valueLabel}}</b></font></div></td>	" +	
				"	 </tr>" +
				"</table>" +
				"</div>";
    },

	
	
	
	update : function() {
		
		this.clear();
	
		var myself=this;
		
		if (this.parameters == undefined) {
			this.parameters = [];
		};

		this.label = this.label || "";
		
		var meteoHTML = "";
		
		if(!myself.queryDefinition){
			console.log("Query not defined");
			meteoHTML = "<b>No Data</b>";
			$("#"+myself.htmlObject).html(meteoHTML);
		} else {
			console.log("Datasource has been added");

			var query = new Query(myself.queryDefinition);
			
			
			query.fetchData(myself.parameters, function(values) {
				
				var gridConf = myself.gridSize(values.resultset.length);
				var resultset = values.resultset;	
				
				for(var idx = 0; idx<resultset.length; idx++){
					if(idx==0||idx%gridConf[0]==0){
						currRow = myself.GUID();
						$("#"+myself.htmlObject).append("<div class='row' id ="+currRow+"></div>");
					}

					currCol = myself.GUID();
					$("#"+currRow).append("<div class='"+gridConf[1]+"' id ="+currCol+"></div>");

					var val1 = resultset[idx][1];
					var val2 = resultset[idx][2];
					
					var meteoLabel = myself.label;
					if(meteoLabel==undefined || meteoLabel==""){
						meteoLabel = resultset[idx][0];
					}
					
					var valueLabel = myself.valueLabel;
					if((valueLabel==undefined || valueLabel=="") && resultset[idx][3] != undefined){
						valueLabel = resultset[idx][3];
					}

					var subValueLabel = myself.subValueLabel;
					if((subValueLabel==undefined || subValueLabel=="") && resultset[idx][4] != undefined){
						subValueLabel = resultset[idx][4];
					}
					
					if(myself.valueLabelFormat != undefined){
						val1 = sprintf(myself.valueLabelFormat,resultset[idx][1]);
					}
					
					if(myself.subValueLabelFormat != undefined){
						val2 = sprintf(myself.subValueLabelFormat,resultset[idx][2]);
					}
					
				
						switch(val1) {
						case "Sun":
							icon = "sun";
							break;
						case "Clear":
							icon = "sun";
							break;						
						case "Moderate Rain":
							icon = "rain";
							break;
						case "Cloudy":
							icon = "cloudy";
							break;
						case "Rain":
							icon = "rain";
							break;
						case "Fog":
							icon = "fog";
							break;
						case "Scattered Clouds":
							icon = "lightcloud";
							break;							
						case "Mostly Cloudy":
							icon = "heavycloud";  
							break;								 
						case "Light Rain":
							icon = "lightrain";
							break;	
						case "Light Rain Showers":
							icon = "lightrain";
							break;	
						case "Overcast":
							icon = "heavycloud";
							break;	
						case "Partly Cloudy":
							icon = "lightcloud";
							break;	
						case "Drizzle":
							icon = "rain";
							break;						
						default:
							icon = "nd";
					} 
					
					


					

					meteoHTML= Mustache.render(myself.template(), {
			            label: meteoLabel || "", 
			            value: val1 || "",
			            valueLabel: valueLabel || "",
			            iconType: icon || "",
			            subValue: val2 || "",
			            subValueLabel: subValueLabel || ""
			        });
			        
					$("#"+currCol).html(meteoHTML);
					if(myself.clickActionFunction==undefined){
						$("#"+currCol).find("img.click.details").remove();
					}
					myself.summariesObj[idx] = $("#"+currCol);
					
					if(myself.clickActionFunction!==undefined){
						$("#"+currCol + " .details").click(function(e){
							myself.clickActionFunction(e, myself)
						});
					}
				}
			});
			
		}

	}
});
